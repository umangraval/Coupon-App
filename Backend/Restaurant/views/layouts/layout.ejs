<!DOCTYPE html>
<html>

  <head>
    <title>Q-Pon by Anmol</title>

    <!-- Viewport mobile tag for sensible mobile support -->
    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1">

    <%/* If you want to discourage search engines from indexing this site, uncomment the following line: */%>
    <%/* <meta name="robots" content="noindex"> */%>


    <!--
        Stylesheets and Preprocessors
        ==============================

        You can always bring in CSS files manually with `<link>` tags, or asynchronously
        using a solution like AMD (RequireJS).  Or, if you like, you can take advantage
        of Sails' conventional asset pipeline (boilerplate Gruntfile).

        By default, stylesheets from your `assets/styles` folder are included
        here automatically (between STYLES and STYLES END). Both CSS (.css) and LESS (.less)
        are supported. In production, your styles will be minified and concatenated into
        a single file.

        To customize any part of the built-in behavior, just edit `tasks/pipeline.js`.
        For example, here are a few things you could do:

            + Change the order of your CSS files
            + Import stylesheets from other directories
            + Use a different or additional preprocessor, like SASS, SCSS or Stylus
    -->

    <!--STYLES-->
    <link rel="stylesheet" href="/styles/importer.css">
    <!--STYLES END-->
  </head>

  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bulma@0.9.0/css/bulma.min.css">

  <body>
    <%- exposeLocalsToBrowser() %>
    <nav class="navbar" role="navigation" aria-label="main navigation">
      <div class="navbar-brand">
        <a class="navbar-item" href="/restaurant/home">
          <img src="https://i.ibb.co/2PrVWMs/logo.png" width="70" height="28">
        </a>
    
        <a role="button" class="navbar-burger burger" aria-label="menu" aria-expanded="false" data-target="navbarBasicExample">
          <span aria-hidden="true"></span>
          <span aria-hidden="true"></span>
          <span aria-hidden="true"></span>
        </a>
      </div>
    
      <div id="navbarBasicExample" class="navbar-menu">
        <div class="navbar-start">
          <a class="navbar-item" href="/restaurant/home">
            Home
          </a>
    
          <a class="navbar-item" href ="/restaurant/paginate">
            Search
          </a>
    
          <a class="navbar-item" href="/restaurant/create">
             Create
          </a>
          <a class="navbar-item" href="/restaurants/getcoupons">
            My Coupons
         </a>
          <a class="navbar-item" href="/restaurant/admin">
             Admin
          </a>
        </div>
                  
        <div class="navbar-end">
          <div class="navbar-item">
            <% var flag =0 %>
<% if(sails.config.session.store.sessions[Object.keys(sails.config.session.store.sessions)[0]]) { %>        
<% var st = sails.config.session.store.sessions[Object.keys(sails.config.session.store.sessions)[0]].split(",") %>
<% if(st[5]) { %>
<% var s = st[5].split(":") %>

    <% var use = s[1].replace("\"", "") %>
    <% var user = use.replace("\"", "") %>
    Hi, <%= user %>
    <% flag = 1 %>
    &nbsp; &nbsp;
    <div class="buttons">
      
      <!-- <form action = "/user/logout" method="post"> -->
        <button type ="submit" class="button is-link" onclick="logoutUser()">
       <strong>Logout</strong>
      </button>
    <% }} %>
    <% if(flag == 0) { %>
         
                <a class="button is-link" href="/user/login">
                  <strong>Log in</strong>
                </a>
                <% } %>
              <!-- </form> -->
              &nbsp; &nbsp; &nbsp; 
            </div>
          </div>
        </div>
      </div>
    </nav>

    <section class="section">
      <div class="container columns is-centered">
          <div class="column">
            <h1 class="title">Q-Pon</h1>
            <h2 class="subtitle">Redeem your coins for dining coupon</h2>
            <br> <br> 

              <%- body %>     
          </div>
      </div>
    </section>



    <!--
        Client-side Templates
        ========================

        HTML templates are important prerequisites of modern, rich client applications.
        To work their magic, frameworks like React, Vue.js, Angular, Ember, and Backbone
        require that you load these templates client-side.

        By default, your Gruntfile is configured to automatically load and precompile
        client-side JST templates in your `assets/templates` folder, then
        include them here automatically (between TEMPLATES and TEMPLATES END).

        To customize this behavior to fit your needs, just edit `tasks/pipeline.js`.
        For example, here are a few things you could do:

            + Import templates from other directories
            + Use a different view engine (handlebars, dust, pug/jade, etc.)
            + Internationalize your client-side templates using a server-side
              stringfile before they're served.
    -->

    <!--TEMPLATES-->
    <!--TEMPLATES END-->


    <!--
        Server-side View Locals
        ========================

        Sometimes, it's convenient to get access to your server-side view locals from
        client-side JavaScript.  This can improve page load times, remove the need for
        extra AJAX requests, and make your client-side code easier to understand and
        to maintain.  Sails provides a simple mechanism for accessing dynamic view
        locals: the "exposeLocalsToBrowser()" view partial.

        For more information on using this built-in feature, see:
        https://sailsjs.com/docs/concepts/views/locals#?escaping-untrusted-data-using-exposelocalstobrowser

    -->


    <!--

      Client-side Javascript
      ========================

      You can always bring in JS files manually with `script` tags, or asynchronously
      on the client using a solution like AMD (RequireJS).  Or, if you like, you can
      take advantage of Sails' conventional asset pipeline (boilerplate Gruntfile).

      By default, files in your `assets/js` folder are included here
      automatically (between SCRIPTS and SCRIPTS END).  Both JavaScript (.js) and
      CoffeeScript (.coffee) are supported. In production, your scripts will be minified
      and concatenated into a single file.

      To customize any part of the built-in behavior, just edit `tasks/pipeline.js`.
      For example, here are a few things you could do:

          + Change the order of your scripts
          + Import scripts from other directories
          + Use a different preprocessor, like TypeScript

    -->

    <!--SCRIPTS-->
    <script src="/dependencies/sails.io.js"></script>
    <!--SCRIPTS END-->
  </body>

</html>

<script>
  async function logoutUser() {
      var r = confirm("Confirm Logout?");
      
      if (r) {
          var response = await fetch("/user/logout/", {
              method: "POST"
          });

          if (response.ok) {
          alert("Logout Successful");
          // document.getElementById("islogged").innerHTML = "";
          location.assign("/");
          } else {
              alert(response.status + ": " + response.statusText);
          }

      } else {
          alert("cancelled");
      }
  };
</script>